// Code generated by counterfeiter. DO NOT EDIT.
package currencyfakes

import (
	"context"
	"sync"

	"github.com/morphysm/famed-github-backend/internal/client/currency"
)

type FakeClient struct {
	GetUSDToETHConversionStub        func(context.Context) (float64, error)
	getUSDToETHConversionMutex       sync.RWMutex
	getUSDToETHConversionArgsForCall []struct {
		arg1 context.Context
	}
	getUSDToETHConversionReturns struct {
		result1 float64
		result2 error
	}
	getUSDToETHConversionReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetUSDToETHConversion(arg1 context.Context) (float64, error) {
	fake.getUSDToETHConversionMutex.Lock()
	ret, specificReturn := fake.getUSDToETHConversionReturnsOnCall[len(fake.getUSDToETHConversionArgsForCall)]
	fake.getUSDToETHConversionArgsForCall = append(fake.getUSDToETHConversionArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetUSDToETHConversionStub
	fakeReturns := fake.getUSDToETHConversionReturns
	fake.recordInvocation("GetUSDToETHConversion", []interface{}{arg1})
	fake.getUSDToETHConversionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetUSDToETHConversionCallCount() int {
	fake.getUSDToETHConversionMutex.RLock()
	defer fake.getUSDToETHConversionMutex.RUnlock()
	return len(fake.getUSDToETHConversionArgsForCall)
}

func (fake *FakeClient) GetUSDToETHConversionCalls(stub func(context.Context) (float64, error)) {
	fake.getUSDToETHConversionMutex.Lock()
	defer fake.getUSDToETHConversionMutex.Unlock()
	fake.GetUSDToETHConversionStub = stub
}

func (fake *FakeClient) GetUSDToETHConversionArgsForCall(i int) context.Context {
	fake.getUSDToETHConversionMutex.RLock()
	defer fake.getUSDToETHConversionMutex.RUnlock()
	argsForCall := fake.getUSDToETHConversionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetUSDToETHConversionReturns(result1 float64, result2 error) {
	fake.getUSDToETHConversionMutex.Lock()
	defer fake.getUSDToETHConversionMutex.Unlock()
	fake.GetUSDToETHConversionStub = nil
	fake.getUSDToETHConversionReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetUSDToETHConversionReturnsOnCall(i int, result1 float64, result2 error) {
	fake.getUSDToETHConversionMutex.Lock()
	defer fake.getUSDToETHConversionMutex.Unlock()
	fake.GetUSDToETHConversionStub = nil
	if fake.getUSDToETHConversionReturnsOnCall == nil {
		fake.getUSDToETHConversionReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.getUSDToETHConversionReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUSDToETHConversionMutex.RLock()
	defer fake.getUSDToETHConversionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ currency.Client = new(FakeClient)
