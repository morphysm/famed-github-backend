// Code generated by counterfeiter. DO NOT EDIT.
package appsfakes

import (
	"context"
	"sync"

	"github.com/google/go-github/v41/github"
	"github.com/morphysm/kudos-github-backend/internal/client/apps"
)

type FakeClient struct {
	GetAccessTokensStub        func(context.Context, int64, []int64) (*github.InstallationToken, error)
	getAccessTokensMutex       sync.RWMutex
	getAccessTokensArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 []int64
	}
	getAccessTokensReturns struct {
		result1 *github.InstallationToken
		result2 error
	}
	getAccessTokensReturnsOnCall map[int]struct {
		result1 *github.InstallationToken
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetAccessTokens(arg1 context.Context, arg2 int64, arg3 []int64) (*github.InstallationToken, error) {
	var arg3Copy []int64
	if arg3 != nil {
		arg3Copy = make([]int64, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.getAccessTokensMutex.Lock()
	ret, specificReturn := fake.getAccessTokensReturnsOnCall[len(fake.getAccessTokensArgsForCall)]
	fake.getAccessTokensArgsForCall = append(fake.getAccessTokensArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 []int64
	}{arg1, arg2, arg3Copy})
	stub := fake.GetAccessTokensStub
	fakeReturns := fake.getAccessTokensReturns
	fake.recordInvocation("GetAccessTokens", []interface{}{arg1, arg2, arg3Copy})
	fake.getAccessTokensMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetAccessTokensCallCount() int {
	fake.getAccessTokensMutex.RLock()
	defer fake.getAccessTokensMutex.RUnlock()
	return len(fake.getAccessTokensArgsForCall)
}

func (fake *FakeClient) GetAccessTokensCalls(stub func(context.Context, int64, []int64) (*github.InstallationToken, error)) {
	fake.getAccessTokensMutex.Lock()
	defer fake.getAccessTokensMutex.Unlock()
	fake.GetAccessTokensStub = stub
}

func (fake *FakeClient) GetAccessTokensArgsForCall(i int) (context.Context, int64, []int64) {
	fake.getAccessTokensMutex.RLock()
	defer fake.getAccessTokensMutex.RUnlock()
	argsForCall := fake.getAccessTokensArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) GetAccessTokensReturns(result1 *github.InstallationToken, result2 error) {
	fake.getAccessTokensMutex.Lock()
	defer fake.getAccessTokensMutex.Unlock()
	fake.GetAccessTokensStub = nil
	fake.getAccessTokensReturns = struct {
		result1 *github.InstallationToken
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAccessTokensReturnsOnCall(i int, result1 *github.InstallationToken, result2 error) {
	fake.getAccessTokensMutex.Lock()
	defer fake.getAccessTokensMutex.Unlock()
	fake.GetAccessTokensStub = nil
	if fake.getAccessTokensReturnsOnCall == nil {
		fake.getAccessTokensReturnsOnCall = make(map[int]struct {
			result1 *github.InstallationToken
			result2 error
		})
	}
	fake.getAccessTokensReturnsOnCall[i] = struct {
		result1 *github.InstallationToken
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccessTokensMutex.RLock()
	defer fake.getAccessTokensMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apps.Client = new(FakeClient)
